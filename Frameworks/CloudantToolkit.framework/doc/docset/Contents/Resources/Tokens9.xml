<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Protocols/CDTObjectMapper.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intf/CDTObjectMapper</TokenIdentifier>
			<Abstract type="html">Provides the ability to insert custom code to map native objects onto CDTDocumentRevisions.  This allows the developer to program with native objects and persist them to Cloudant.</Abstract>
			<DeclaredIn>CDTObjectMapper.h</DeclaredIn>
            
			
			<NodeRef refid="9"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/CDTObjectMapper/objectToDocument:error:</TokenIdentifier>
			<Abstract type="html">Given a native object, return the corresponding CDTDocumentRevision to persist.</Abstract>
			<DeclaredIn>CDTObjectMapper.h</DeclaredIn>
			
			<Declaration>- (CDTDocumentRevision *)objectToDocument:(id)object error:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">The native object to persist.</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract type="html">Will be set upon problems.  Errors may be reported with a non-failing conversion.  If nil is returned an error should always be returned.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">the corresponding CDTDocumentRevision</Abstract></ReturnValue>
			<Anchor>//api/name/objectToDocument:error:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/CDTObjectMapper/documentToObject:error:</TokenIdentifier>
			<Abstract type="html">Given a CDTDocumentRevision, hydrate a native object with the contents of the CDTDocumentRevision</Abstract>
			<DeclaredIn>CDTObjectMapper.h</DeclaredIn>
			
			<Declaration>- (id)documentToObject:(CDTDocumentRevision *)document error:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>document</Name>
					<Abstract type="html">The CDTDocumentRevision to be used to hydrate the native object.</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract type="html">Will be set upon problems.  Errors may be reported with a non-failing conversion.  If nil is returned an error should always be returned.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">the corresponding CDTDocumentRevision</Abstract></ReturnValue>
			<Anchor>//api/name/documentToObject:error:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/CDTObjectMapper/dataTypeForClassName:</TokenIdentifier>
			<Abstract type="html">Looks up the data type for a given class.</Abstract>
			<DeclaredIn>CDTObjectMapper.h</DeclaredIn>
			
			<Declaration>- (NSString *)dataTypeForClassName:(NSString *)className</Declaration>
			<Parameters>
				<Parameter>
					<Name>className</Name>
					<Abstract type="html">The name of the class to lookup</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The dataType for the class.</Abstract></ReturnValue>
			<Anchor>//api/name/dataTypeForClassName:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/CDTObjectMapper/classNameForDataType:</TokenIdentifier>
			<Abstract type="html">Looks up the Class for a given data type.</Abstract>
			<DeclaredIn>CDTObjectMapper.h</DeclaredIn>
			
			<Declaration>- (NSString *)classNameForDataType:(NSString *)dataType</Declaration>
			<Parameters>
				<Parameter>
					<Name>dataType</Name>
					<Abstract type="html">The data type to lookup</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The class name for the data type.</Abstract></ReturnValue>
			<Anchor>//api/name/classNameForDataType:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/CDTObjectMapper/setDataType:forClassName:</TokenIdentifier>
			<Abstract type="html">Associates a data type with a Class</Abstract>
			<DeclaredIn>CDTObjectMapper.h</DeclaredIn>
			
			<Declaration>- (void)setDataType:(NSString *)dataType forClassName:(NSString *)className</Declaration>
			<Parameters>
				<Parameter>
					<Name>dataType</Name>
					<Abstract type="html">The data type to associate with the class</Abstract>
				</Parameter><Parameter>
					<Name>className</Name>
					<Abstract type="html">The class to be associated with the dataType</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setDataType:forClassName:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
        
	</File>
</Tokens>